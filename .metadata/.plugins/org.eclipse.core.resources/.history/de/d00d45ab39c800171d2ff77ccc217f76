package linkedList;
/*
 * 143. Reorder List
 * Medium
 * Given a singly linked list L: L0→L1→…→Ln-1→Ln,
reorder it to: L0→Ln→L1→Ln-1→L2→Ln-2→…

You must do this in-place without altering the nodes' values.

For example,
Given {1,2,3,4}, reorder it to {1,4,2,3}.


 */
public class Q143_ReorderList {

	public static void main(String[] args) 
	{
		ListNode l1 = new ListNode(1);
		reorderList2(l1);
	}
	
	public static void reorderList(ListNode head) 
	{
        if(head == null || head.next == null)
            return;
        ListNode fast = head;
        ListNode slow = head;
        
        // find the middle node  
        while(fast.next!=null && fast.next.next!=null)
        {
            fast = fast.next.next;
            slow = slow.next;
        }
        
        // reverse the right half   1->2->3->4->5->6 to 1->2->3->6->5->4
        ListNode prev = null;
        ListNode curr = slow.next;
        ListNode next = null;
        
        while(curr!=null)
        {
            next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }
        slow.next = prev;
        
        // reorder the list  1->2->3->6->5->4 to 1->6->2->5->3->4
        ListNode left = head;
        ListNode right = slow.next;
        while(left!=slow)
        {
            slow.next = right.next;
            right.next = left.next;
            left.next = right;
            left = right.next;
            right = slow.next;
        }
    }

}
