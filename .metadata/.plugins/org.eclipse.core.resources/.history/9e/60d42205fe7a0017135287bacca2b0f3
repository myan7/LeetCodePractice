package lc.q34.SearchforaRange;
/*
 * 34. Search for a Range 
 * Medium
 * Given an array of integers sorted in ascending order, 
 * find the starting and ending position of a given target value.

Your algorithm's runtime complexity must be in the order of O(log n).

If the target is not found in the array, return [-1, -1].

For example,
Given [5, 7, 7, 8, 8, 10] and target value 8,
return [3, 4].
 * 
 */

public class SearchforaRange {

	public static void main(String[] args) 
	{
		int[] tc1 = {5,7,7,8,8,10};
		int target = 8;
		System.out.println(searchRange(tc1,target));
	}
	
	
	public static int[] searchRange(int[] nums, int target) 
	{
		if(nums.length==0)
		{
			int[] ans = {-1,-1};
			return ans;
		}
       return binarySearch(nums,0,nums.length-1,target);
    }
	
	public static int[] binarySearch(int[] nums, int start, int end, int target)
	{
		int mid = start+ (end-start)/2;
		int left = start;
		int right = end;
		if(nums[mid]<target)
		{
			return binarySearch(nums,mid,end,target);
		}else if(nums[mid]>target)
		{
			return binarySearch(nums,start,mid,target);
		}else if(nums[mid] == target && nums[mid-1]<target)
		{
			left = mid;
		}
		else if(nums[mid] == target && nums[mid-1]>target)
		{
			right = mid;
		}
		else
		{
			int [] ans = {-1,-1};
			return ans;
		}
		
		int[] ans =  {left, right};
		return ans;
	}

}
