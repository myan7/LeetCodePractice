package lc.q34.SearchforaRange;
/*
 * 34. Search for a Range 
 * Medium
 * Given an array of integers sorted in ascending order, 
 * find the starting and ending position of a given target value.

Your algorithm's runtime complexity must be in the order of O(log n).

If the target is not found in the array, return [-1, -1].

For example,
Given [5, 7, 7, 8, 8, 10] and target value 8,
return [3, 4].
 * 
 */

public class SearchforaRange {

	public static void main(String[] args) 
	{
		int[] tc1 = {5,7,7,8,8,10};
		int target1 = 8;
		int[] tc2 = {1};
		int target2 = 0;
		int[] ans =searchRange(tc2,target2);
		for(int e: ans)
		{
			System.out.print(e+" ");
		}
	}
	
//	public static int[] searchRange(int[] nums, int target) 
//	{
//		int left = 0;
//		int right = nums.length;
//		
//		int[] ans = new int[2];
//		
//	}
	
	public static int[] searchRange(int[] nums, int target) 
	{
		if(nums.length==0)
		{
			int[] ans = {-1,-1};
			return ans;
		}
		int[] ans = new int[2];
		ans[0] = binarySearch1(nums,0,nums.length-1,target);
		ans[1] = binarySearch2(nums,ans[0],nums.length-1,target);
		return ans;
    }
	
	public static int binarySearch1(int[] nums, int start, int end, int target)
	{
		int mid = start+ (end-start)/2;
		int left = start;
		if(nums[mid]<target)
		{
			return binarySearch1(nums,mid,end,target);
		}else if(nums[mid]>target)
		{
			return binarySearch1(nums,start,mid,target);
		}else if(nums[mid] == target)
		{
			while(mid>=1)
			{
				if(nums[mid-1]<target)
				{
					left = mid;
					break;
				}
				else
					mid--;
			}
		}
		else
		{
			left = -1;
		}
		
		return left;
	}
	public static int binarySearch2(int[] nums, int start, int end, int target)
	{
		int mid = start+ (end-start)/2;
		int right = end;
		if(nums[mid]<target)
		{
			return binarySearch1(nums,mid,end,target);
		}else if(nums[mid]>target)
		{
			return binarySearch1(nums,start,mid,target);
		}else if(nums[mid] == target)
		{
			while(mid<nums.length-1)
			{
				if(nums[mid+1]>target)
				{
					right = mid;
					break;
				}
				else
					mid++;
			}
			
		}
		else
		{
			right = -1;
		}
		
		return right;
	}

}
