package countAndSay;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

/*
 * 38. Count and Say
 * The count-and-say sequence is the sequence of integers beginning as follows:
1, 11, 21, 1211, 111221, ...

1 is read off as "one 1" or 11.
11 is read off as "two 1s" or 21.
21 is read off as "one 2, then one 1" or 1211.
Given an integer n, generate the nth sequence.

Note: The sequence of integers will be represented as a string.
 * 
 */
public class CountAndSaySolution {

	public static void main(String[] args) 
	{
		// TODO Auto-generated method stub
		int n=11;
		System.out.println(countAndSay1(4));
	}

	public static String countAndSay1(int n) 
	{
		String ans = "1";
		int i =0;
		while(i<n)
		{
			ans = countAndSay(Integer.parseInt(ans));
			System.out.println(ans);
			i++;
		}
		return ans;
	}
	
// I spent two days on this one but finally I found I misunderstood the problem.
//	They ask me to find the nth number in that count-and-say sequence
//	1,11,21,1211,111221,312211,...
//	what I did is to tell you how many numbers in the parameter you pass into the method.
//	for example, 111123 is 411213 four ones,one two, and one three.
	public static String countAndSay(int n) 
	{
		String[] nums = Integer.toString(n).split("");
//		System.out.println("This is the String[]");
//		for(String str:nums)
//		{
//			System.out.print(str+" ");
//		}
//		System.out.println();
		
		int[] numsInt = new int[nums.length];
		
		Set<Integer> mySet = new HashSet<Integer>();
		Map<Integer,Integer> maps = new HashMap<Integer,Integer>();
		for(int i = 0;i<nums.length; i++)
		{
			numsInt[i] = Integer.parseInt(nums[i]);
		}
//		System.out.println("This is the int[]");
//		for(int e: numsInt)
//		{
//			System.out.print(e+" ");
//		}
//		System.out.println();
		
		for(int e:numsInt)
		{
			mySet.add(e);
			maps.put(e, 0);
		}
		
//		System.out.println("This is mySet");
//		for(int val: mySet)
//		{
//			System.out.print(val+ " ");
//		}
//		System.out.println();
		// this is to make sure we can know how many different numbers in the array.
		
		
		int count = 0;
		for(int e:numsInt)
		{
			if(mySet.contains(e))
			{
//				System.out.println("maps.get(e) is "+maps.get(e));
				count = maps.get(e);
				maps.put(e, ++count);
//				Notice you need to use ++count to make it increase. 
//				count++ will not do the job because every time it enters the loop
//				count is given a value extracted from maps.
			}
		}
		
		StringBuilder ans = new StringBuilder();
		for(int val: mySet)
		{
			ans.append(maps.get(val).toString()+Integer.toString(val));
		}
		
		return ans.toString();
    }

}
