/*
 * 9. Palindrome Number
 * Determine whether an integer is a palindrome. Do this without extra space.
 * hint:
 * Some hints: 
 * 
 * Could negative integers be palindromes? (ie, -1)
 * 
 * If you are thinking of converting the integer to string, 
 * note the restriction of using extra space.
 * 
 * You could also try reversing an integer. 
 * However, if you have solved the problem "Reverse Integer", 
 * you know that the reversed integer might overflow. 
 * How would you handle such case?
 * 
 * 
 * There is a more generic way of solving this problem.
 * 
 * 
 * */

package palindromenumber;

public class PalindromeNumber {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		System.out.println( "10^10=" + (10^10) );

	}
/*
 * Problems related with numbers are frequently solved by / and %. 
 * No need of extra space is required. 
 * This problem is similar with the Reverse Integer problem.
 
 * Note: no extra space here means do not convert the integer to string, 
 * since string will be a copy of the integer and take extra space. 
 * The space take by div, left, and right can be ignored.


 * */
	
	public static boolean isPalindrome(int x) 
	{
	
	}
/*
 * 11507 / 11507 test cases passed.
 * Status: Accepted
 * Runtime: 238 ms
 * 
 * */
	public static boolean isPalindrome3(int x) 
	{
		if (x<0 || (x!=0 && x%10==0)) return false;
	    int rev = 0;
	    while (x>rev){
	    	rev = rev*10 + x%10;
	    	x = x/10;
	    }
	    return (x==rev || x==rev/10);
	}
	
/*
* 11507 / 11507 test cases passed.
* Status: Accepted
* Runtime: 227 ms
* */
	public static boolean isPalindrome2(int x) 
	{
		if (x < 0)
			return false;
 
		// initialize how many zeros
		int div = 1;
		while (x / div >= 10) {
			div *= 10;
		}
 
		while (x != 0) {
			int left = x / div;
			int right = x % 10;
 
			if (left != right)
				return false;
 
			x = (x % div) / 10;
			div /= 100;
		}
 
		return true;
    }

}
