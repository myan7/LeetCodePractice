package linkedList;

import java.util.ArrayList;

/*
 * 445. Add Two Numbers II
 * Medium
 * You are given two non-empty linked lists representing two non-negative integers. 
 * The most significant digit comes first and each of their nodes contain a single digit. 
 * Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Follow up:
What if you cannot modify the input lists? In other words, reversing the lists is not allowed.

Example:

Input: (7 -> 2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 8 -> 0 -> 7
 */
public class Q445_AddTwoNumbersII {

	public static void main(String[] args) {

		ListNode l1= new ListNode(7);
		ListNode l2= new ListNode(2);
		ListNode l3= new ListNode(4);
		ListNode l4= new ListNode(3);
		ListNode l5= new ListNode(5);
		ListNode l6= new ListNode(6);
		ListNode l7= new ListNode(4);
		l1.next = l2;
		l2.next = l3;
		l3.next = l4;
		l5.next = l6;
		l6.next = l7;
		addTwoNumbers(l1,l5).display();
//		reverse(l1).display();
		
	}
	
	public static ListNode addTwoNumbers(ListNode l1, ListNode l2) 
	{
		ListNode curr1 = reverse(l1);
		ListNode curr2 = reverse(l2);
		ArrayList<Integer> carry = new ArrayList<>();
		carry.add(0);
		int index = 0;
		int value = 0;
		while(curr1.next != null && curr2.next != null)
		{
			ListNode next1 = curr1.next;
			ListNode next2 = curr2.next;
			value = curr1.val+curr2.val+carry.get(index);
			carry.add(value/10);
			curr1.val = value%10;
			curr1 = next1;
			curr2 = next2;
			index++;
		}
		
		if(curr1.next == null && curr2.next != null)
		{
			curr1 = curr2;
		}
		l1 = reverse(curr1);
        return l1;
    }
	
	public static ListNode reverse(ListNode head)
	{
		ListNode curr = head;
		ListNode next = null;
		ListNode prev = null;
		while(curr!=null)
		{
			next = curr.next;
			curr.next = prev;
			prev = curr;
			curr = next;
		}
		return prev;
	}

}
